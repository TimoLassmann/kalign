name: Python

on:
  push:
    branches: [ main, python ]
    paths:
      - 'python-kalign/**'
      - 'lib/**'
      - 'CMakeLists.txt'
      - 'pyproject.toml'
      - '.github/workflows/python.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'python-kalign/**'
      - 'lib/**'
      - 'CMakeLists.txt'
      - 'pyproject.toml'
      - '.github/workflows/python.yml'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 black isort mypy
        
    - name: Lint with flake8
      run: |
        flake8 python-kalign --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 python-kalign --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check formatting with black
      run: |
        black --check --diff python-kalign/
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff python-kalign/

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libomp-dev cmake
        
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install libomp cmake
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov pytest-benchmark numpy
        
    - name: Build and install package
      run: |
        python -m pip install -e .
        
    - name: Test with pytest
      run: |
        pytest tests/python/ -v --cov=kalign --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: coverage.xml
        flags: python
        name: codecov-umbrella

  build-test:
    name: Build and test package
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libomp-dev cmake
        
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install libomp cmake
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Test installation from wheel
      run: |
        python -m pip install dist/*.whl
        python -c "import kalign; print(f'kalign {kalign.__version__} installed successfully')"
        
    - name: Test basic functionality
      run: |
        python -c "
        import kalign
        sequences = ['ATCGATCG', 'ATCGTCG', 'ATCGATCG']
        aligned = kalign.align(sequences, seq_type='dna')
        assert len(aligned) == 3
        print('âœ“ Basic alignment test passed')
        "